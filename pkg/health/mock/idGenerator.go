// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/flaki-service/pkg/flaki (interfaces: IDGeneratorModule)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// FlakiModule is a mock of IDGeneratorModule interface
type FlakiModule struct {
	ctrl     *gomock.Controller
	recorder *FlakiModuleMockRecorder
}

// FlakiModuleMockRecorder is the mock recorder for FlakiModule
type FlakiModuleMockRecorder struct {
	mock *FlakiModule
}

// NewFlakiModule creates a new mock instance
func NewFlakiModule(ctrl *gomock.Controller) *FlakiModule {
	mock := &FlakiModule{ctrl: ctrl}
	mock.recorder = &FlakiModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *FlakiModule) EXPECT() *FlakiModuleMockRecorder {
	return m.recorder
}

// NextID mocks base method
func (m *FlakiModule) NextID(arg0 context.Context) (string, error) {
	ret := m.ctrl.Call(m, "NextID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// NextID indicates an expected call of NextID
func (mr *FlakiModuleMockRecorder) NextID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextID", reflect.TypeOf((*FlakiModule)(nil).NextID), arg0)
}

// NextValidID mocks base method
func (m *FlakiModule) NextValidID(arg0 context.Context) string {
	ret := m.ctrl.Call(m, "NextValidID", arg0)
	ret0, _ := ret[0].(string)
	return ret0
}

// NextValidID indicates an expected call of NextValidID
func (mr *FlakiModuleMockRecorder) NextValidID(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "NextValidID", reflect.TypeOf((*FlakiModule)(nil).NextValidID), arg0)
}
