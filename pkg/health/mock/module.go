// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/cloudtrust/flaki-service/pkg/health (interfaces: InfluxHealthChecker,JaegerHealthChecker,RedisHealthChecker,SentryHealthChecker,StorageModule)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	common_healthcheck "github.com/cloudtrust/common-healthcheck"
	health "github.com/cloudtrust/flaki-service/pkg/health"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
	time "time"
)

// InfluxHealthChecker is a mock of InfluxHealthChecker interface
type InfluxHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *InfluxHealthCheckerMockRecorder
}

// InfluxHealthCheckerMockRecorder is the mock recorder for InfluxHealthChecker
type InfluxHealthCheckerMockRecorder struct {
	mock *InfluxHealthChecker
}

// NewInfluxHealthChecker creates a new mock instance
func NewInfluxHealthChecker(ctrl *gomock.Controller) *InfluxHealthChecker {
	mock := &InfluxHealthChecker{ctrl: ctrl}
	mock.recorder = &InfluxHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *InfluxHealthChecker) EXPECT() *InfluxHealthCheckerMockRecorder {
	return m.recorder
}

// HealthChecks mocks base method
func (m *InfluxHealthChecker) HealthChecks(arg0 context.Context) []common_healthcheck.InfluxReport {
	ret := m.ctrl.Call(m, "HealthChecks", arg0)
	ret0, _ := ret[0].([]common_healthcheck.InfluxReport)
	return ret0
}

// HealthChecks indicates an expected call of HealthChecks
func (mr *InfluxHealthCheckerMockRecorder) HealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthChecks", reflect.TypeOf((*InfluxHealthChecker)(nil).HealthChecks), arg0)
}

// JaegerHealthChecker is a mock of JaegerHealthChecker interface
type JaegerHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *JaegerHealthCheckerMockRecorder
}

// JaegerHealthCheckerMockRecorder is the mock recorder for JaegerHealthChecker
type JaegerHealthCheckerMockRecorder struct {
	mock *JaegerHealthChecker
}

// NewJaegerHealthChecker creates a new mock instance
func NewJaegerHealthChecker(ctrl *gomock.Controller) *JaegerHealthChecker {
	mock := &JaegerHealthChecker{ctrl: ctrl}
	mock.recorder = &JaegerHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *JaegerHealthChecker) EXPECT() *JaegerHealthCheckerMockRecorder {
	return m.recorder
}

// HealthChecks mocks base method
func (m *JaegerHealthChecker) HealthChecks(arg0 context.Context) []common_healthcheck.JaegerReport {
	ret := m.ctrl.Call(m, "HealthChecks", arg0)
	ret0, _ := ret[0].([]common_healthcheck.JaegerReport)
	return ret0
}

// HealthChecks indicates an expected call of HealthChecks
func (mr *JaegerHealthCheckerMockRecorder) HealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthChecks", reflect.TypeOf((*JaegerHealthChecker)(nil).HealthChecks), arg0)
}

// RedisHealthChecker is a mock of RedisHealthChecker interface
type RedisHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *RedisHealthCheckerMockRecorder
}

// RedisHealthCheckerMockRecorder is the mock recorder for RedisHealthChecker
type RedisHealthCheckerMockRecorder struct {
	mock *RedisHealthChecker
}

// NewRedisHealthChecker creates a new mock instance
func NewRedisHealthChecker(ctrl *gomock.Controller) *RedisHealthChecker {
	mock := &RedisHealthChecker{ctrl: ctrl}
	mock.recorder = &RedisHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *RedisHealthChecker) EXPECT() *RedisHealthCheckerMockRecorder {
	return m.recorder
}

// HealthChecks mocks base method
func (m *RedisHealthChecker) HealthChecks(arg0 context.Context) []common_healthcheck.RedisReport {
	ret := m.ctrl.Call(m, "HealthChecks", arg0)
	ret0, _ := ret[0].([]common_healthcheck.RedisReport)
	return ret0
}

// HealthChecks indicates an expected call of HealthChecks
func (mr *RedisHealthCheckerMockRecorder) HealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthChecks", reflect.TypeOf((*RedisHealthChecker)(nil).HealthChecks), arg0)
}

// SentryHealthChecker is a mock of SentryHealthChecker interface
type SentryHealthChecker struct {
	ctrl     *gomock.Controller
	recorder *SentryHealthCheckerMockRecorder
}

// SentryHealthCheckerMockRecorder is the mock recorder for SentryHealthChecker
type SentryHealthCheckerMockRecorder struct {
	mock *SentryHealthChecker
}

// NewSentryHealthChecker creates a new mock instance
func NewSentryHealthChecker(ctrl *gomock.Controller) *SentryHealthChecker {
	mock := &SentryHealthChecker{ctrl: ctrl}
	mock.recorder = &SentryHealthCheckerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *SentryHealthChecker) EXPECT() *SentryHealthCheckerMockRecorder {
	return m.recorder
}

// HealthChecks mocks base method
func (m *SentryHealthChecker) HealthChecks(arg0 context.Context) []common_healthcheck.SentryReport {
	ret := m.ctrl.Call(m, "HealthChecks", arg0)
	ret0, _ := ret[0].([]common_healthcheck.SentryReport)
	return ret0
}

// HealthChecks indicates an expected call of HealthChecks
func (mr *SentryHealthCheckerMockRecorder) HealthChecks(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "HealthChecks", reflect.TypeOf((*SentryHealthChecker)(nil).HealthChecks), arg0)
}

// StorageModule is a mock of StorageModule interface
type StorageModule struct {
	ctrl     *gomock.Controller
	recorder *StorageModuleMockRecorder
}

// StorageModuleMockRecorder is the mock recorder for StorageModule
type StorageModuleMockRecorder struct {
	mock *StorageModule
}

// NewStorageModule creates a new mock instance
func NewStorageModule(ctrl *gomock.Controller) *StorageModule {
	mock := &StorageModule{ctrl: ctrl}
	mock.recorder = &StorageModuleMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *StorageModule) EXPECT() *StorageModuleMockRecorder {
	return m.recorder
}

// Read mocks base method
func (m *StorageModule) Read(arg0 string) (health.StoredReport, error) {
	ret := m.ctrl.Call(m, "Read", arg0)
	ret0, _ := ret[0].(health.StoredReport)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Read indicates an expected call of Read
func (mr *StorageModuleMockRecorder) Read(arg0 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Read", reflect.TypeOf((*StorageModule)(nil).Read), arg0)
}

// Update mocks base method
func (m *StorageModule) Update(arg0 string, arg1 time.Duration, arg2 []byte) error {
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *StorageModuleMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*StorageModule)(nil).Update), arg0, arg1, arg2)
}
