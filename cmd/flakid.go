package main

import (
	"database/sql"
	"encoding/json"
	"fmt"
	"io"
	"net"
	"net/http"
	"net/http/pprof"
	"os"
	"os/signal"
	"sort"
	"syscall"
	"time"

	common "github.com/cloudtrust/common-healthcheck"
	flaki_gen "github.com/cloudtrust/flaki"
	"github.com/cloudtrust/flaki-service/api/fb"
	"github.com/cloudtrust/flaki-service/internal/flakid"
	"github.com/cloudtrust/flaki-service/pkg/flaki"
	"github.com/cloudtrust/flaki-service/pkg/health"
	health_job "github.com/cloudtrust/flaki-service/pkg/job"
	"github.com/cloudtrust/go-jobs"
	"github.com/cloudtrust/go-jobs/job"
	job_lock "github.com/cloudtrust/go-jobs/lock"
	job_status "github.com/cloudtrust/go-jobs/status"
	"github.com/coreos/go-systemd/dbus"
	"github.com/garyburd/redigo/redis"
	sentry "github.com/getsentry/raven-go"
	"github.com/go-kit/kit/endpoint"
	"github.com/go-kit/kit/log"
	"github.com/go-kit/kit/metrics"
	gokit_influx "github.com/go-kit/kit/metrics/influx"
	"github.com/go-kit/kit/ratelimit"
	grpc_transport "github.com/go-kit/kit/transport/grpc"
	flatbuffers "github.com/google/flatbuffers/go"
	"github.com/gorilla/mux"
	influx "github.com/influxdata/influxdb/client/v2"
	_ "github.com/lib/pq"
	opentracing "github.com/opentracing/opentracing-go"
	"github.com/spf13/pflag"
	"github.com/spf13/viper"
	jaeger "github.com/uber/jaeger-client-go/config"
	"golang.org/x/time/rate"
	"google.golang.org/grpc"
)

var (
	// ComponentName is the name of the component.
	ComponentName = "flaki-service"
	// ComponentID is an unique ID generated by Flaki at component startup.
	ComponentID = "unknown"
	// Version is filled by the compiler.
	Version = "unknown"
	// Environment is filled by the compiler.
	Environment = "unknown"
	// GitCommit is filled by the compiler.
	GitCommit = "unknown"
)

const (
	influxKey = "influx"
	jaegerKey = "jaeger"
	redisKey  = "redis"
	sentryKey = "sentry"
)

func main() {

	// Logger.
	var logger = log.NewJSONLogger(os.Stdout)
	{
		logger = log.With(logger, "ts", log.DefaultTimestampUTC, "caller", log.DefaultCaller)
	}
	defer logger.Log("msg", "goodbye")

	// Configurations.
	var c = config(log.With(logger, "unit", "config"))
	var (
		// Component
		grpcAddr = c.GetString("component-grpc-host-port")
		httpAddr = c.GetString("component-http-host-port")

		// Flaki
		flakiNodeID      = uint64(c.GetInt("flaki-node-id"))
		flakiComponentID = uint64(c.GetInt("flaki-component-id"))

		// Enabled units
		cockroachEnabled  = c.GetBool("cockroach")
		influxEnabled     = c.GetBool("influx")
		jaegerEnabled     = c.GetBool("jaeger")
		redisEnabled      = c.GetBool("redis")
		sentryEnabled     = c.GetBool("sentry")
		pprofRouteEnabled = c.GetBool("pprof-route-enabled")

		// Influx
		influxHTTPConfig = influx.HTTPConfig{
			Addr:     fmt.Sprintf("http://%s", c.GetString("influx-host-port")),
			Username: c.GetString("influx-username"),
			Password: c.GetString("influx-password"),
		}
		influxBatchPointsConfig = influx.BatchPointsConfig{
			Precision:        c.GetString("influx-precision"),
			Database:         c.GetString("influx-database"),
			RetentionPolicy:  c.GetString("influx-retention-policy"),
			WriteConsistency: c.GetString("influx-write-consistency"),
		}
		influxWriteInterval = c.GetDuration("influx-write-interval")

		// Jaeger
		jaegerConfig = jaeger.Configuration{
			Disabled: !jaegerEnabled,
			Sampler: &jaeger.SamplerConfig{
				Type:              c.GetString("jaeger-sampler-type"),
				Param:             c.GetFloat64("jaeger-sampler-param"),
				SamplingServerURL: fmt.Sprintf("http://%s", c.GetString("jaeger-sampler-host-port")),
			},
			Reporter: &jaeger.ReporterConfig{
				LogSpans:            c.GetBool("jaeger-reporter-logspan"),
				BufferFlushInterval: c.GetDuration("jaeger-write-interval"),
			},
		}
		jaegerCollectorHealthcheckURL = c.GetString("jaeger-collector-healthcheck-host-port")

		// Sentry
		sentryDSN = c.GetString("sentry-dsn")

		// Redis
		redisURL           = c.GetString("redis-host-port")
		redisPassword      = c.GetString("redis-password")
		redisDatabase      = c.GetInt("redis-database")
		redisWriteInterval = c.GetDuration("redis-write-interval")

		// Cockroach
		cockroachHostPort      = c.GetString("cockroach-host-port")
		cockroachUsername      = c.GetString("cockroach-username")
		cockroachPassword      = c.GetString("cockroach-password")
		cockroachHealthDB      = c.GetString("cockroach-health-database")
		cockroachJobsDB        = c.GetString("cockroach-jobs-database")
		cockroachCleanInterval = c.GetDuration("cockroach-clean-interval")

		// Jobs
		healthChecksValidity = map[string]time.Duration{
			influxKey: c.GetDuration("job-influx-health-validity"),
			jaegerKey: c.GetDuration("job-jaeger-health-validity"),
			redisKey:  c.GetDuration("job-redis-health-validity"),
			sentryKey: c.GetDuration("job-sentry-health-validity"),
		}

		// Rate limiting
		rateNextID           = c.GetInt("rate-next-id")
		rateNextValidID      = c.GetInt("rate-next-valid-id")
		rateHealthInfluxExec = c.GetInt("rate-influx-health-exec")
		rateHealthInfluxRead = c.GetInt("rate-influx-health-read")
		rateHealthJaegerExec = c.GetInt("rate-jaeger-health-exec")
		rateHealthJaegerRead = c.GetInt("rate-jaeger-health-read")
		rateHealthRedisExec  = c.GetInt("rate-redis-health-exec")
		rateHealthRedisRead  = c.GetInt("rate-redis-health-read")
		rateHealthSentryExec = c.GetInt("rate-sentry-health-exec")
		rateHealthSentryRead = c.GetInt("rate-sentry-health-read")
		rateHealthAll        = c.GetInt("rate-all-health")
	)

	// Redis.
	type Redis interface {
		Close() error
		Do(commandName string, args ...interface{}) (reply interface{}, err error)
		Send(commandName string, args ...interface{}) error
		Flush() error
	}

	var redisClient Redis = &flakid.NoopRedis{}
	if redisEnabled {
		var err error
		redisClient, err = redis.Dial("tcp", redisURL, redis.DialDatabase(redisDatabase), redis.DialPassword(redisPassword))
		if err != nil {
			logger.Log("msg", "could not create redis client", "error", err)
			return
		}
		defer redisClient.Close()

		// Create logger that duplicates logs to stdout and Redis.
		logger = log.NewJSONLogger(io.MultiWriter(os.Stdout, flakid.NewLogstashRedisWriter(redisClient, ComponentName)))
		logger = log.With(logger, "ts", log.DefaultTimestampUTC, "caller", log.DefaultCaller)
	}

	// Flaki unique distributed ID generator.
	var flakiGen *flaki_gen.Flaki
	{
		var logger = log.With(logger, "unit", "flaki")
		var err error
		flakiGen, err = flaki_gen.New(flaki_gen.ComponentID(flakiComponentID), flaki_gen.NodeID(flakiNodeID))
		if err != nil {
			logger.Log("msg", "could not create Flaki generator", "error", err)
			return
		}
	}

	// Get unique ID for this component
	ComponentID = flakiGen.NextValidIDString()

	// Add component name, component ID and version to the logger tags.
	logger = log.With(logger, "component_name", ComponentName, "component_id", ComponentID, "component_version", Version)

	// Log component version infos.
	logger.Log("environment", Environment, "git_commit", GitCommit)

	// Critical errors channel.
	var errc = make(chan error)
	go func() {
		var c = make(chan os.Signal, 1)
		signal.Notify(c, syscall.SIGINT, syscall.SIGTERM)
		errc <- fmt.Errorf("%s", <-c)
	}()

	// Sentry.
	type Sentry interface {
		CaptureError(err error, tags map[string]string, interfaces ...sentry.Interface) string
		URL() string
		Close()
	}

	var sentryClient Sentry = &flakid.NoopSentry{}
	if sentryEnabled {
		var logger = log.With(logger, "unit", "sentry")
		var err error
		sentryClient, err = sentry.New(sentryDSN)
		if err != nil {
			logger.Log("msg", "could not create Sentry client", "error", err)
			return
		}
		defer sentryClient.Close()
	}

	// Influx client.
	type Metrics interface {
		NewCounter(name string) metrics.Counter
		NewGauge(name string) metrics.Gauge
		NewHistogram(name string) metrics.Histogram
		WriteLoop(c <-chan time.Time)
		Ping(timeout time.Duration) (time.Duration, string, error)
	}

	var influxMetrics Metrics = &flakid.NoopMetrics{}
	if influxEnabled {
		var logger = log.With(logger, "unit", "influx")

		var influxClient, err = influx.NewHTTPClient(influxHTTPConfig)
		if err != nil {
			logger.Log("msg", "could not create Influx client", "error", err)
			return
		}
		defer influxClient.Close()

		var gokitInflux = gokit_influx.New(
			map[string]string{},
			influxBatchPointsConfig,
			log.With(logger, "unit", "go-kit influx"),
		)

		influxMetrics = flakid.NewMetrics(influxClient, gokitInflux)
	}

	// Jaeger client.
	var tracer opentracing.Tracer
	{
		var logger = log.With(logger, "unit", "jaeger")
		var closer io.Closer
		var err error

		tracer, closer, err = jaegerConfig.New(ComponentName)
		if err != nil {
			logger.Log("msg", "could not create Jaeger tracer", "error", err)
			return
		}
		defer closer.Close()
	}

	// Systemd D-Bus connection.
	var systemDConn *dbus.Conn
	{
		var err error
		systemDConn, err = dbus.New()
		if err != nil {
			logger.Log("msg", "could not create systemd D-Bus connection", "error", err)
			return
		}
	}

	// Cockroach DB.
	type Cockroach interface {
		Exec(query string, args ...interface{}) (sql.Result, error)
		Query(query string, args ...interface{}) (*sql.Rows, error)
		QueryRow(query string, args ...interface{}) *sql.Row
	}

	var cHealthDB Cockroach
	var cJobsDB Cockroach
	if cockroachEnabled {
		var err error
		cHealthDB, err = sql.Open("postgres", fmt.Sprintf("postgresql://%s:%s@%s/%s?sslmode=disable", cockroachUsername, cockroachPassword, cockroachHostPort, cockroachHealthDB))
		if err != nil {
			logger.Log("msg", "could not create cockroach DB connection for health DB", "error", err)
			return
		}
		cJobsDB, err = sql.Open("postgres", fmt.Sprintf("postgresql://%s:%s@%s/%s?sslmode=disable", cockroachUsername, cockroachPassword, cockroachHostPort, cockroachJobsDB))
		if err != nil {
			logger.Log("msg", "could not create cockroach DB connection for health DB", "error", err)
			return
		}
	}

	// Flaki service.
	var flakiLogger = log.With(logger, "svc", "flaki")

	var flakiModule flaki.IDGeneratorModule
	{
		flakiModule = flaki.NewModule(flakiGen)
		flakiModule = flaki.MakeModuleInstrumentingCounterMW(influxMetrics.NewCounter("flaki_module_ctr"))(flakiModule)
		flakiModule = flaki.MakeModuleInstrumentingMW(influxMetrics.NewHistogram("flaki_module"))(flakiModule)
		flakiModule = flaki.MakeModuleLoggingMW(log.With(flakiLogger, "mw", "module"))(flakiModule)
		flakiModule = flaki.MakeModuleTracingMW(tracer)(flakiModule)
	}

	var flakiComponent flaki.IDGeneratorComponent
	{
		flakiComponent = flaki.NewComponent(flakiModule)
		flakiComponent = flaki.MakeComponentInstrumentingMW(influxMetrics.NewHistogram("flaki_component"))(flakiComponent)
		flakiComponent = flaki.MakeComponentLoggingMW(log.With(flakiLogger, "mw", "component"))(flakiComponent)
		flakiComponent = flaki.MakeComponentTracingMW(tracer)(flakiComponent)
		flakiComponent = flaki.MakeComponentTrackingMW(sentryClient, log.With(flakiLogger, "mw", "component"))(flakiComponent)
	}

	var nextIDEndpoint endpoint.Endpoint
	{
		nextIDEndpoint = flaki.MakeNextIDEndpoint(flakiComponent)
		nextIDEndpoint = flaki.MakeEndpointInstrumentingMW(influxMetrics.NewHistogram("nextid_endpoint"))(nextIDEndpoint)
		nextIDEndpoint = flaki.MakeEndpointLoggingMW(log.With(flakiLogger, "mw", "endpoint", "unit", "NextID"))(nextIDEndpoint)
		nextIDEndpoint = flaki.MakeEndpointTracingMW(tracer, "nextid_endpoint")(nextIDEndpoint)
	}

	var nextValidIDEndpoint endpoint.Endpoint
	{
		nextValidIDEndpoint = flaki.MakeNextValidIDEndpoint(flakiComponent)
		nextValidIDEndpoint = flaki.MakeEndpointInstrumentingMW(influxMetrics.NewHistogram("nextvalidid_endpoint"))(nextValidIDEndpoint)
		nextValidIDEndpoint = flaki.MakeEndpointLoggingMW(log.With(flakiLogger, "mw", "endpoint", "unit", "NextValidID"))(nextValidIDEndpoint)
		nextValidIDEndpoint = flaki.MakeEndpointTracingMW(tracer, "nextvalidid_endpoint")(nextValidIDEndpoint)
	}

	// Rate limiting
	nextIDEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateNextID))(nextIDEndpoint)
	nextValidIDEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateNextValidID))(nextValidIDEndpoint)

	var flakiEndpoints = flaki.Endpoints{
		NextIDEndpoint:      nextIDEndpoint,
		NextValidIDEndpoint: nextValidIDEndpoint,
	}

	// Health service.
	var healthLogger = log.With(logger, "svc", "health")

	var cockroachModule *health.StorageModule
	{
		cockroachModule = health.NewStorageModule(ComponentName, ComponentID, cHealthDB)
	}

	var influxHM health.InfluxHealthChecker
	{
		influxHM = common.NewInfluxModule(influxMetrics, influxEnabled)
		influxHM = common.MakeInfluxModuleLoggingMW(log.With(healthLogger, "mw", "module"))(influxHM)
	}
	var jaegerHM health.JaegerHealthChecker
	{
		jaegerHM = common.NewJaegerModule(systemDConn, http.DefaultClient, jaegerCollectorHealthcheckURL, jaegerEnabled)
		jaegerHM = common.MakeJaegerModuleLoggingMW(log.With(healthLogger, "mw", "module"))(jaegerHM)
	}
	var redisHM health.RedisHealthChecker
	{
		redisHM = common.NewRedisModule(redisClient, redisEnabled)
		redisHM = common.MakeRedisModuleLoggingMW(log.With(healthLogger, "mw", "module"))(redisHM)
	}
	var sentryHM health.SentryHealthChecker
	{
		sentryHM = common.NewSentryModule(sentryClient, http.DefaultClient, sentryEnabled)
		sentryHM = common.MakeSentryModuleLoggingMW(log.With(healthLogger, "mw", "module"))(sentryHM)
	}
	var healthComponent health.HealthChecker
	{
		healthComponent = health.NewComponent(influxHM, jaegerHM, redisHM, sentryHM, cockroachModule, healthChecksValidity)
		healthComponent = health.MakeComponentLoggingMW(log.With(healthLogger, "mw", "component"))(healthComponent)
	}

	var influxExecHealthEndpoint endpoint.Endpoint
	{
		influxExecHealthEndpoint = health.MakeExecInfluxHealthCheckEndpoint(healthComponent)
		influxExecHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "ExecInfluxHealthCheck"))(influxExecHealthEndpoint)
		influxExecHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(influxExecHealthEndpoint)
	}
	var influxReadHealthEndpoint endpoint.Endpoint
	{
		influxReadHealthEndpoint = health.MakeReadInfluxHealthCheckEndpoint(healthComponent)
		influxReadHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "ReadInfluxHealthCheck"))(influxReadHealthEndpoint)
		influxReadHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(influxReadHealthEndpoint)
	}
	var jaegerExecHealthEndpoint endpoint.Endpoint
	{
		jaegerExecHealthEndpoint = health.MakeExecJaegerHealthCheckEndpoint(healthComponent)
		jaegerExecHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "ExecJaegerHealthCheck"))(jaegerExecHealthEndpoint)
		jaegerExecHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(jaegerExecHealthEndpoint)
	}
	var jaegerReadHealthEndpoint endpoint.Endpoint
	{
		jaegerReadHealthEndpoint = health.MakeReadJaegerHealthCheckEndpoint(healthComponent)
		jaegerReadHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "ReadJaegerHealthCheck"))(jaegerReadHealthEndpoint)
		jaegerReadHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(jaegerReadHealthEndpoint)
	}
	var redisExecHealthEndpoint endpoint.Endpoint
	{
		redisExecHealthEndpoint = health.MakeExecRedisHealthCheckEndpoint(healthComponent)
		redisExecHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "ExecRedisHealthCheck"))(redisExecHealthEndpoint)
		redisExecHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(redisExecHealthEndpoint)
	}
	var redisReadHealthEndpoint endpoint.Endpoint
	{
		redisReadHealthEndpoint = health.MakeReadRedisHealthCheckEndpoint(healthComponent)
		redisReadHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "ReadRedisHealthCheck"))(redisReadHealthEndpoint)
		redisReadHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(redisReadHealthEndpoint)
	}
	var sentryExecHealthEndpoint endpoint.Endpoint
	{
		sentryExecHealthEndpoint = health.MakeExecSentryHealthCheckEndpoint(healthComponent)
		sentryExecHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "ExecSentryHealthCheck"))(sentryExecHealthEndpoint)
		sentryExecHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(sentryExecHealthEndpoint)
	}
	var sentryReadHealthEndpoint endpoint.Endpoint
	{
		sentryReadHealthEndpoint = health.MakeReadSentryHealthCheckEndpoint(healthComponent)
		sentryReadHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "ReadSentryHealthCheck"))(sentryReadHealthEndpoint)
		sentryReadHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(sentryReadHealthEndpoint)
	}
	var allHealthEndpoint endpoint.Endpoint
	{
		allHealthEndpoint = health.MakeAllHealthChecksEndpoint(healthComponent)
		allHealthEndpoint = health.MakeEndpointLoggingMW(log.With(healthLogger, "mw", "endpoint", "unit", "AllHealthCheck"))(allHealthEndpoint)
		allHealthEndpoint = health.MakeEndpointCorrelationIDMW(flakiModule)(allHealthEndpoint)
	}

	// Rate limiting
	influxExecHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthInfluxExec))(influxExecHealthEndpoint)
	influxReadHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthInfluxRead))(influxReadHealthEndpoint)
	jaegerExecHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthJaegerExec))(jaegerExecHealthEndpoint)
	jaegerReadHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthJaegerRead))(jaegerReadHealthEndpoint)
	redisExecHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthRedisExec))(redisExecHealthEndpoint)
	redisReadHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthRedisRead))(redisReadHealthEndpoint)
	sentryExecHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthSentryExec))(sentryExecHealthEndpoint)
	sentryReadHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthSentryRead))(sentryReadHealthEndpoint)
	allHealthEndpoint = ratelimit.NewErroringLimiter(rate.NewLimiter(rate.Every(time.Second), rateHealthAll))(allHealthEndpoint)

	var healthEndpoints = health.Endpoints{
		InfluxExecHealthCheck: influxExecHealthEndpoint,
		InfluxReadHealthCheck: influxReadHealthEndpoint,
		JaegerExecHealthCheck: jaegerExecHealthEndpoint,
		JaegerReadHealthCheck: jaegerReadHealthEndpoint,
		RedisExecHealthCheck:  redisExecHealthEndpoint,
		RedisReadHealthCheck:  redisReadHealthEndpoint,
		SentryExecHealthCheck: sentryExecHealthEndpoint,
		SentryReadHealthCheck: sentryReadHealthEndpoint,
		AllHealthChecks:       allHealthEndpoint,
	}

	// Jobs
	{
		var ctrl = controller.NewController(ComponentName, ComponentID, &idGenerator{flakiGen}, &job_lock.NoopLocker{}, controller.EnableStatusStorage(job_status.New(cJobsDB)))

		var influxJob *job.Job
		{
			var err error
			influxJob, err = health_job.MakeInfluxJob(influxHM, healthChecksValidity[influxKey], cockroachModule)
			if err != nil {
				logger.Log("msg", "could not create influx health job", "error", err)
				return
			}
			ctrl.Register(influxJob)
			ctrl.Schedule("@minutely", influxJob.Name())
		}

		var jaegerJob *job.Job
		{
			var err error
			jaegerJob, err = health_job.MakeJaegerJob(jaegerHM, healthChecksValidity[jaegerKey], cockroachModule)
			if err != nil {
				logger.Log("msg", "could not create jaeger health job", "error", err)
				return
			}
			ctrl.Register(jaegerJob)
			ctrl.Schedule("@minutely", jaegerJob.Name())
		}

		var redisJob *job.Job
		{
			var err error
			redisJob, err = health_job.MakeRedisJob(redisHM, healthChecksValidity[redisKey], cockroachModule)
			if err != nil {
				logger.Log("msg", "could not create redis health job", "error", err)
				return
			}
			ctrl.Register(redisJob)
			ctrl.Schedule("@minutely", redisJob.Name())
		}

		var sentryJob *job.Job
		{
			var err error
			sentryJob, err = health_job.MakeSentryJob(sentryHM, healthChecksValidity[sentryKey], cockroachModule)
			if err != nil {
				logger.Log("msg", "could not create sentry health job", "error", err)
				return
			}
			ctrl.Register(sentryJob)
			ctrl.Schedule("@minutely", sentryJob.Name())
		}

		var cleanJob *job.Job
		{
			var err error
			cleanJob, err = health_job.MakeCleanCockroachJob(cockroachModule, log.With(logger, "job", "clean health checks"))
			if err != nil {
				logger.Log("msg", "could not create clean job", "error", err)
				return
			}
			ctrl.Register(cleanJob)
			ctrl.Schedule(fmt.Sprintf("@every %s", cockroachCleanInterval), cleanJob.Name())

		}
		ctrl.Start()
	}

	// GRPC server.
	go func() {
		var logger = log.With(logger, "transport", "grpc")
		logger.Log("addr", grpcAddr)

		var lis net.Listener
		{
			var err error
			lis, err = net.Listen("tcp", grpcAddr)
			if err != nil {
				logger.Log("msg", "could not initialise listener", "error", err)
				errc <- err
				return
			}
		}

		// NextID.
		var nextIDHandler grpc_transport.Handler
		{
			nextIDHandler = flaki.MakeGRPCNextIDHandler(flakiEndpoints.NextIDEndpoint)
			nextIDHandler = flaki.MakeGRPCTracingMW(tracer, ComponentName, "grpc_server_nextid")(nextIDHandler)
		}

		// NextValidID.
		var nextValidIDHandler grpc_transport.Handler
		{
			nextValidIDHandler = flaki.MakeGRPCNextValidIDHandler(flakiEndpoints.NextValidIDEndpoint)
			nextValidIDHandler = flaki.MakeGRPCTracingMW(tracer, ComponentName, "grpc_server_nextvalidid")(nextValidIDHandler)
		}

		var grpcServer = flaki.NewGRPCServer(nextIDHandler, nextValidIDHandler)
		var flakiServer = grpc.NewServer(grpc.CustomCodec(flatbuffers.FlatbuffersCodec{}))
		fb.RegisterFlakiServer(flakiServer, grpcServer)

		errc <- flakiServer.Serve(lis)
	}()

	// HTTP server.
	go func() {
		var logger = log.With(logger, "transport", "http")
		logger.Log("addr", httpAddr)

		var route = mux.NewRouter()

		// NextID.
		var nextIDHandler http.Handler
		{
			nextIDHandler = flaki.MakeHTTPNextIDHandler(flakiEndpoints.NextIDEndpoint)
			nextIDHandler = flaki.MakeHTTPTracingMW(tracer, ComponentName, "http_server_nextid")(nextIDHandler)
		}
		route.Handle("/nextid", nextIDHandler)

		// NextValidID.
		var nextValidIDHandler http.Handler
		{
			nextValidIDHandler = flaki.MakeHTTPNextValidIDHandler(flakiEndpoints.NextValidIDEndpoint)
			nextValidIDHandler = flaki.MakeHTTPTracingMW(tracer, ComponentName, "http_server_nextvalidid")(nextValidIDHandler)
		}
		route.Handle("/nextvalidid", nextValidIDHandler)

		// Version.
		route.Handle("/", http.HandlerFunc(makeVersion(ComponentName, ComponentID, Version, Environment, GitCommit)))

		// Health checks.
		var healthSubroute = route.PathPrefix("/health").Subrouter()

		var allHealthChecksHandler = health.MakeHealthCheckHandler(healthEndpoints.AllHealthChecks)
		healthSubroute.Handle("", allHealthChecksHandler)

		healthSubroute.Handle("/influx", health.MakeHealthCheckHandler(healthEndpoints.InfluxReadHealthCheck)).Methods("GET")
		healthSubroute.Handle("/influx", health.MakeHealthCheckHandler(healthEndpoints.InfluxExecHealthCheck)).Methods("POST")

		healthSubroute.Handle("/jaeger", health.MakeHealthCheckHandler(healthEndpoints.JaegerReadHealthCheck)).Methods("GET")
		healthSubroute.Handle("/jaeger", health.MakeHealthCheckHandler(healthEndpoints.JaegerExecHealthCheck)).Methods("POST")

		healthSubroute.Handle("/redis", health.MakeHealthCheckHandler(healthEndpoints.RedisReadHealthCheck)).Methods("GET")
		healthSubroute.Handle("/redis", health.MakeHealthCheckHandler(healthEndpoints.RedisExecHealthCheck)).Methods("POST")

		healthSubroute.Handle("/sentry", health.MakeHealthCheckHandler(healthEndpoints.SentryReadHealthCheck)).Methods("GET")
		healthSubroute.Handle("/sentry", health.MakeHealthCheckHandler(healthEndpoints.SentryExecHealthCheck)).Methods("POST")

		// Debug.
		if pprofRouteEnabled {
			var debugSubroute = route.PathPrefix("/debug").Subrouter()
			debugSubroute.HandleFunc("/pprof/", http.HandlerFunc(pprof.Index))
			debugSubroute.HandleFunc("/pprof/cmdline", http.HandlerFunc(pprof.Cmdline))
			debugSubroute.HandleFunc("/pprof/profile", http.HandlerFunc(pprof.Profile))
			debugSubroute.HandleFunc("/pprof/symbol", http.HandlerFunc(pprof.Symbol))
			debugSubroute.HandleFunc("/pprof/trace", http.HandlerFunc(pprof.Trace))
		}

		errc <- http.ListenAndServe(httpAddr, route)
	}()

	// Influx writing.
	go func() {
		var tic = time.NewTicker(influxWriteInterval)
		defer tic.Stop()
		influxMetrics.WriteLoop(tic.C)
	}()

	// Redis writing.
	if redisEnabled {
		go func() {
			var tic = time.NewTicker(redisWriteInterval)
			defer tic.Stop()
			for range tic.C {
				redisClient.Flush()
			}
		}()
	}
	logger.Log("error", <-errc)
}

type idGenerator struct {
	flaki *flaki_gen.Flaki
}

func (g *idGenerator) NextID() string {
	return g.flaki.NextValidIDString()
}

type info struct {
	Name    string `json:"name"`
	ID      string `json:"id"`
	Version string `json:"version"`
	Env     string `json:"environment"`
	Commit  string `json:"commit"`
}

// makeVersion makes a HTTP handler that returns information about the version of the service.
func makeVersion(componentName, componentID, version, environment, gitCommit string) func(http.ResponseWriter, *http.Request) {
	return func(w http.ResponseWriter, r *http.Request) {
		w.Header().Set("Content-Type", "application/json; charset=utf-8")

		var infos = info{
			Name:    componentName,
			ID:      componentID,
			Version: version,
			Env:     environment,
			Commit:  gitCommit,
		}

		var j, err = json.MarshalIndent(infos, "", "  ")
		if err != nil {
			w.WriteHeader(http.StatusInternalServerError)
		} else {
			w.WriteHeader(http.StatusOK)
			w.Write(j)
		}
	}
}

func config(logger log.Logger) *viper.Viper {
	logger.Log("msg", "load configuration and command args")

	var v = viper.New()

	// Component default.
	v.SetDefault("config-file", "./configs/flakid.yml")
	v.SetDefault("component-http-host-port", "0.0.0.0:8888")
	v.SetDefault("component-grpc-host-port", "0.0.0.0:5555")

	// Flaki generator default.
	v.SetDefault("flaki-node-id", 0)
	v.SetDefault("flaki-component-id", 0)

	// Influx DB client default.
	v.SetDefault("influx", false)
	v.SetDefault("influx-host-port", "")
	v.SetDefault("influx-username", "")
	v.SetDefault("influx-password", "")
	v.SetDefault("influx-database", "")
	v.SetDefault("influx-precision", "")
	v.SetDefault("influx-retention-policy", "")
	v.SetDefault("influx-write-consistency", "")
	v.SetDefault("influx-write-interval", 1000)

	// Sentry client default.
	v.SetDefault("sentry", false)
	v.SetDefault("sentry-dsn", "")

	// Jaeger tracing default.
	v.SetDefault("jaeger", false)
	v.SetDefault("jaeger-sampler-type", "")
	v.SetDefault("jaeger-sampler-param", 0)
	v.SetDefault("jaeger-sampler-host-port", "")
	v.SetDefault("jaeger-reporter-logspan", false)
	v.SetDefault("jaeger-write-interval", "1s")
	v.SetDefault("jaeger-collector-healthcheck-host-port", "")

	// Debug routes enabled.
	v.SetDefault("pprof-route-enabled", true)

	// Redis.
	v.SetDefault("redis", false)
	v.SetDefault("redis-host-port", "")
	v.SetDefault("redis-password", "")
	v.SetDefault("redis-database", 0)
	v.SetDefault("redis-database", 0)
	v.SetDefault("redis-write-interval", "1s")

	// Cockroach.
	v.SetDefault("cockroach", false)
	v.SetDefault("cockroach-host-port", "")
	v.SetDefault("cockroach-username", "")
	v.SetDefault("cockroach-password", "")
	v.SetDefault("cockroach-health-database", "")
	v.SetDefault("cockroach-jobs-database", "")
	v.SetDefault("cockroach-clean-interval", "24h")

	// Jobs
	v.SetDefault("job-influx-health-validity", "1m")
	v.SetDefault("job-jaeger-health-validity", "1m")
	v.SetDefault("job-redis-health-validity", "1m")
	v.SetDefault("job-sentry-health-validity", "1m")

	// Rate limiting
	v.SetDefault("rate-next-id", 1000)
	v.SetDefault("rate-next-valid-id", 1000)
	v.SetDefault("rate-influx-health-exec", 1000)
	v.SetDefault("rate-influx-health-read", 1000)
	v.SetDefault("rate-jaeger-health-exec", 1000)
	v.SetDefault("rate-jaeger-health-read", 1000)
	v.SetDefault("rate-redis-health-exec", 1000)
	v.SetDefault("rate-redis-health-read", 1000)
	v.SetDefault("rate-sentry-health-exec", 1000)
	v.SetDefault("rate-sentry-health-read", 1000)
	v.SetDefault("rate-all-health", 1000)

	// First level of override.
	pflag.String("config-file", v.GetString("config-file"), "The configuration file path can be relative or absolute.")
	v.BindPFlag("config-file", pflag.Lookup("config-file"))
	pflag.Parse()

	// Load config.
	v.SetConfigFile(v.GetString("config-file"))
	var err = v.ReadInConfig()
	if err != nil {
		logger.Log("error", err)
	}

	// If the host/port is not set, we consider the components deactivated.
	v.Set("influx", v.GetString("influx-host-port") != "")
	v.Set("sentry", v.GetString("sentry-dsn") != "")
	v.Set("jaeger", v.GetString("jaeger-sampler-host-port") != "")
	v.Set("redis", v.GetString("redis-host-port") != "")
	v.Set("cockroach", v.GetString("cockroach-host-port") != "")

	// Log config in alphabetical order.
	var keys = v.AllKeys()
	sort.Strings(keys)

	for _, k := range keys {
		logger.Log(k, v.Get(k))
	}

	return v
}
